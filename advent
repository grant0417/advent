#!/usr/bin/env python3

import os
from pathlib import Path
import subprocess
import sys
import argparse
import re

AGE_PUBLIC_KEY = "age140duwh987gm560y9ka363t9jy2n476m7q9up0mqkuew6ptxer4pq8yejqr"
TEMPLATE_PATH = "src/day_template.rs"

ENCRYPTED_DIR = "data-encrypted"
DECRYPTED_DIR = "data"

YEAR_RE = re.compile(r"const YEAR: u32 = (\d+);")
DAY_RE = re.compile(r"const DAY: u32 = (\d+);")


# Subcommands


def day(args: argparse.Namespace):
    year = args.year
    day = args.day

    if year < 2015:
        print("Year must be greater than 2015")
        sys.exit(1)

    if day > 25:
        print("Day must be <= 25")
        sys.exit(1)

    year_folder = f"src/_{year}"
    mod_path = f"{year_folder}/mod.rs"
    day_path = f"src/_{year}/day{day:>02}.rs"

    if os.path.exists(day_path):
        print(f"Day {day} already exists")
        sys.exit(1)

    if not os.path.exists(year_folder):
        os.makedirs(year_folder)
        with open(mod_path, "w") as mod_file:
            mod_file.write("pub mod day01;\n")
        print(f"Created {mod_path}")
    else:
        with open(mod_path, "a") as mod_file:
            mod_file.write(f"pub mod day{day:>02};\n")
        print(f"Updated {mod_path}")

    template = open(TEMPLATE_PATH, "r")
    os.makedirs(os.path.dirname(day_path), exist_ok=True)
    with open(day_path, "w") as day_file:
        template_str = template.read()

        template_str = YEAR_RE.sub(f"const YEAR: u32 = {year};", template_str)
        template_str = DAY_RE.sub(f"const DAY: u32 = {day};", template_str)

        day_file.write(template_str)
    template.close()
    print(f"Created {day_path}")


def test(args: argparse.Namespace):
    year = args.year
    day = args.day
    if day is not None:
        os.system(f"cargo nextest run -E 'test(/^_{year}::day{day:>02}/)'")
    else:
        os.system(f"cargo nextest run -E 'test(/^_{year}/)'")


def encrypt_file(src_file: Path, dest_file: Path) -> None:
    try:
        cmd = ["age", "-r", AGE_PUBLIC_KEY, "-o", dest_file, src_file]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        if result.returncode != 0:
            print(f"Error encrypting {src_file}: {result.stderr}")
    except subprocess.CalledProcessError as e:
        print(f"Failed to encrypt {src_file}: {e.stderr}")
    except Exception as e:
        print(f"Unexpected error while encrypting {src_file}: {str(e)}")


def encrypt_directory(source_dir: str, dest_dir: str) -> None:
    source_path = Path(source_dir)
    dest_path = Path(dest_dir)

    dest_path.mkdir(parents=True, exist_ok=True)

    for current_dir, _, files in os.walk(source_path):
        current_path = Path(current_dir)
        rel_path = current_path.relative_to(source_path)

        dest_dir_path = dest_path / rel_path
        dest_dir_path.mkdir(parents=True, exist_ok=True)

        for file in files:
            source_file = current_path / file
            dest_file = dest_dir_path / f"{file}.age"
            if not dest_file.exists():
                encrypt_file(source_file, dest_file)


def decrypt_file(src_file: Path, dest_file: Path, private_key_file: Path) -> None:
    try:
        cmd = ["age", "--decrypt", "-i", private_key_file, "-o", dest_file, src_file]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        if result.returncode != 0:
            print(f"Error decrypting {src_file}: {result.stderr}")
    except subprocess.CalledProcessError as e:
        print(f"Failed to decrypt {src_file}: {e.stderr}")
    except Exception as e:
        print(f"Unexpected error while decrypting {src_file}: {str(e)}")


def decrypt_directory(source_dir: str, dest_dir: str, private_key_file: str) -> None:
    source_path = Path(source_dir)
    dest_path = Path(dest_dir)
    private_key_file = Path(private_key_file)
    dest_path.mkdir(parents=True, exist_ok=True)

    for current_dir, _, files in os.walk(source_path):
        current_path = Path(current_dir)
        rel_path = current_path.relative_to(source_path)
        dest_dir_path = dest_path / rel_path
        dest_dir_path.mkdir(parents=True, exist_ok=True)

        for file in files:
            if not file.endswith(".age"):
                continue
            source_file = current_path / file
            dest_file = dest_dir_path / file[:-4]
            if source_file.is_symlink():
                print(f"Skipping symlink: {source_file}")
                continue
            decrypt_file(source_file, dest_file, private_key_file)


def encrypt(_):
    encrypt_directory(DECRYPTED_DIR, ENCRYPTED_DIR)


def decrypt(_):
    decrypt_directory(ENCRYPTED_DIR, DECRYPTED_DIR, ".age-key")


# Main


def parse_args():
    parser = argparse.ArgumentParser(prog="advent")
    subparsers = parser.add_subparsers()

    add_parser = subparsers.add_parser("add")
    add_parser.add_argument("year", type=int)
    add_parser.add_argument("day", type=int)
    add_parser.set_defaults(func=day)

    test_parser = subparsers.add_parser("test")
    test_parser.add_argument("year", type=int)
    test_parser.add_argument("day", type=int, nargs="?")
    test_parser.set_defaults(func=test)

    encrypt_parser = subparsers.add_parser("encrypt")
    encrypt_parser.set_defaults(func=encrypt)

    decrypt_parser = subparsers.add_parser("decrypt")
    decrypt_parser.set_defaults(func=decrypt)

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    args.func(args)
